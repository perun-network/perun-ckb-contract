import blockchain;

/* Perun Types */
array SEC1EncodedPubKey [byte; 33];

array Balances [Uint64; 2];

array True [byte; 1];
array False [byte; 1];

union Bool {
  True,
  False,
}

array A [byte; 1];
array B [byte; 1];

union ParticipantIndex {
  A,
  B,
}

option App (Bytes);

// Terminology:
// - script_hash: By script_hash we mean the results of the syscalls load_cell_lock_hash / load_cell_type_hash
//                and the sdk function calc_script_hash. This is the hash of the script struct (code_hash, hash_type and args).
// - code_hash:   By code_hash we mean the member of a script that hold the hash of the executed code (depending on the hash_type).
//                See: https://docs.nervos.org/docs/reference/script/



table Participant {
  // payment_script_hash specifies the script-hash used
  // to lock payments to this participant (upon channel close)
  payment_script_hash:  Byte32,
  // payment_min_capacity specifies the minimum capacity of the payment lock script.
  payment_min_capacity: Uint64,

  // unlock_script_hash specifies the script-hash that needs to be present in the inputs
  // to a transaction to authorize the transaction to interact with the channel as
  // this channel participant.
  unlock_script_hash:   Byte32,

  pub_key: SEC1EncodedPubKey,
}
table ChannelParameters {
  party_a: Participant,
  party_b: Participant,
  nonce:        Byte32,
  challenge_duration: Uint64,
  // The default should be NoApp!
  app: App,
  // This should always be set to true for, as we currently only support ledger channels.
  is_ledger_channel: Bool,
  // This should always be set to false for, as we currently do not support virtual channels.
  is_virtual_channel: Bool,
}

// Important: Upon channel creation, every participant must verify the integrity of the channel.
// This includes verifying that the correct ChannelConstants are present.
// If e.g. the payment_min_capacity (inside the participants of the channel parameters) were to be significantly larger than the minimum 
// capacity of the payment lock script, a party could steal funds from the channel participants with balances smaller than the 
// payment_min_capacity upon channel closing.
table ChannelConstants {
  params: ChannelParameters,
  // pfls__code_hash specifies the code hash of the lock_script that guards funds for this channel.
  // Specifically, this should be the perun-funds-lockscript.
  pfls_code_hash:     Byte32,
  pfls_hash_type:     byte,
  pfls_min_capacity: Uint64,

  // pcls_hash specifies the lock_script used for this channel.
  // Specifically, this should be the perun-channel-lockscript.
  pcls_code_hash:     Byte32,
  pcls_hash_type:     byte,

  thread_token: ChannelToken,
}


table Fund {
  index: ParticipantIndex,
}
array Abort [byte; 1];

table Dispute {
  sig_a: Bytes,
  sig_b: Bytes,
}
table Close {
  state: ChannelState,
  sig_a: Bytes,
  sig_b: Bytes,
}
array ForceClose [byte; 1];


union ChannelWitness {
  Fund,
  Abort,
  Dispute,
  Close,
  ForceClose,
}

table ChannelState {
  // 
  channel_id: Byte32,
  balances: Balances,
  version: Uint64,
  is_final: Bool,
} 

table ChannelStatus {
  state: ChannelState,
  funded: Bool,
  funding: Balances,
  disputed: Bool,
}

struct ChannelToken {
  out_point: OutPoint,
}