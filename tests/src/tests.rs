use crate::perun::random;

use super::*;
use ckb_occupied_capacity::Capacity;
use ckb_testtool::ckb_types::{bytes::Bytes, packed::*, prelude::*};
use ckb_testtool::context::Context;
use perun;
use perun::test;
use perun_common::helpers::blake2b256;
use perun_common::perun_types::{Balances, Bool, ChannelState, SEC1EncodedPubKey};
use perun_common::sig::verify_signature;

const MAX_CYCLES: u64 = 10 * 10_000_000;
const CHALLENGE_DURATION_MS: u64 = 10 * 1000;

#[test]
fn test_signature() {
    // This tests the interoperability between the on-chain signature verification
    // and the key generation & signing in the perun-ckb-backend's wallet.

    // This signature was generated by the wallet in the perun-ckb-backend
    let sig_string = "30450221009db9b818ea39cb8d7f5c6733827489f23f5543001a403c4de4935f056cc29da20220051b9170eaf8256b05f16a36596e7fa27659c4c43921db599e4f1c41384d1ed2";
    let sig = hex::decode(sig_string).expect("decoding signature");
    let sig_bytes: Bytes = sig.into();

    // This public key was generated by the wallet in the perun-ckb-backend
    let pubkey_string = "0324c0b92f5e5b948d2485d2f6ab0e72575a9d695e07528d4527e61d6c13483795";
    let pubkey = hex::decode(pubkey_string).expect("decoding pubkey");
    let pubkey_bytes: [Byte; 33] = pubkey
        .iter()
        .map(|x| (*x).into())
        .collect::<Vec<Byte>>()
        .try_into()
        .unwrap();
    SEC1EncodedPubKey::new_builder().set(pubkey_bytes).build();

    let balances_array: [Uint64; 2] = [10u64.pack(), 11u64.pack()];
    let balances = Balances::new_builder().set(balances_array).build();
    let channel_state = ChannelState::new_builder()
        .channel_id(Byte32::zero())
        .balances(balances)
        .is_final(Bool::from_bool(true))
        .version(10u64.pack())
        .build();
    let msg = channel_state.as_slice();
    let msg_hash = blake2b256(msg);

    verify_signature(&msg_hash, &sig_bytes, pubkey.as_slice()).expect("valid signature");
}

#[test]
fn channel_test_bench() -> Result<(), perun::Error> {
    let res = [
        test_funding_abort,
        test_successful_funding,
        test_close,
        test_force_close,
        test_multiple_disputes,
    ]
    .iter()
    .map(|test| {
        let mut context = Context::default();
        let pe = perun::harness::Env::new(&mut context, MAX_CYCLES, CHALLENGE_DURATION_MS)
            .expect("preparing environment");
        test(&mut context, &pe)
    })
    .collect::<Vec<_>>();
    res.into_iter().collect()
}

fn create_channel_test(
    context: &mut Context,
    env: &perun::harness::Env,
    parts: &[perun::TestAccount],
    test: impl Fn(&mut perun::channel::Channel<perun::State>) -> Result<(), perun::Error>,
) -> Result<(), perun::Error> {
    let mut chan = perun::channel::Channel::new(context, env, parts);
    test(&mut chan)
}

fn test_funding_abort(
    context: &mut Context,
    env: &perun::harness::Env,
) -> Result<(), perun::Error> {
    let (alice, bob) = ("alice", "bob");
    let parts = [random::account(alice), random::account(bob)];
    let funding_timeout = 10;
    let funding = [
        Capacity::bytes(1000)?.as_u64(),
        Capacity::bytes(1000)?.as_u64(),
    ];
    let funding_agreement = test::FundingAgreement::new_with_capacities(
        parts.iter().cloned().zip(funding.iter().cloned()).collect(),
    );
    create_channel_test(context, env, &parts, |chan| {
        chan.with(alice)
            .open(&funding_agreement)
            .expect("opening channel");

        chan.delay(funding_timeout);

        chan.with(alice).abort().expect("aborting channel");

        chan.assert();
        Ok(())
    })
}

fn test_successful_funding(
    context: &mut Context,
    env: &perun::harness::Env,
) -> Result<(), perun::Error> {
    let (alice, bob) = ("alice", "bob");
    let parts = [random::account(alice), random::account(bob)];
    let funding = [
        Capacity::bytes(100)?.as_u64(),
        Capacity::bytes(100)?.as_u64(),
    ];
    let funding_agreement = test::FundingAgreement::new_with_capacities(
        parts.iter().cloned().zip(funding.iter().cloned()).collect(),
    );
    create_channel_test(context, env, &parts, |chan| {
        chan.with(alice)
            .open(&funding_agreement)
            .expect("opening channel");

        chan.with(bob)
            .fund(&funding_agreement)
            .expect("funding channel");

        chan.assert();
        Ok(())
    })
}

fn test_close(context: &mut Context, env: &perun::harness::Env) -> Result<(), perun::Error> {
    let (alice, bob) = ("alice", "bob");
    let parts = [random::account(alice), random::account(bob)];
    let funding = [
        Capacity::bytes(100)?.as_u64(),
        Capacity::bytes(100)?.as_u64(),
    ];
    let funding_agreement = test::FundingAgreement::new_with_capacities(
        parts.iter().cloned().zip(funding.iter().cloned()).collect(),
    );
    create_channel_test(context, env, &parts, |chan| {
        chan.with(alice)
            .open(&funding_agreement)
            .expect("opening channel");

        chan.with(bob)
            .fund(&funding_agreement)
            .expect("funding channel");

        chan.with(alice)
            .finalize()
            .close()
            .expect("closing channel");

        chan.assert();
        Ok(())
    })
}

fn test_force_close(context: &mut Context, env: &perun::harness::Env) -> Result<(), perun::Error> {
    let (alice, bob) = ("alice", "bob");
    let parts = [random::account(alice), random::account(bob)];
    let funding = [
        Capacity::bytes(100)?.as_u64(),
        Capacity::bytes(100)?.as_u64(),
    ];
    let funding_agreement = test::FundingAgreement::new_with_capacities(
        parts.iter().cloned().zip(funding.iter().cloned()).collect(),
    );
    create_channel_test(context, env, &parts, |chan| {
        chan.with(alice)
            .open(&funding_agreement)
            .expect("opening channel");

        chan.with(bob)
            .fund(&funding_agreement)
            .expect("funding channel");

        chan.with(bob).dispute().expect("invalid channel dispute");

        chan.delay(env.challenge_duration);

        chan.with(bob).force_close().expect("force closing channel");

        chan.assert();
        Ok(())
    })
}

fn test_multiple_disputes(
    context: &mut Context,
    env: &perun::harness::Env,
) -> Result<(), perun::Error> {
    let (alice, bob) = ("alice", "bob");
    let parts = [random::account(alice), random::account(bob)];
    let funding = [
        Capacity::bytes(100)?.as_u64(),
        Capacity::bytes(100)?.as_u64(),
    ];
    let funding_agreement = test::FundingAgreement::new_with_capacities(
        parts.iter().cloned().zip(funding.iter().cloned()).collect(),
    );
    create_channel_test(context, env, &parts, |chan| {
        chan.with(alice)
            .open(&funding_agreement)
            .expect("opening channel");

        chan.with(bob)
            .fund(&funding_agreement)
            .expect("funding channel");

        chan.with(alice)
            .valid()
            .dispute()
            .expect("disputing channel");

        chan.with(bob).valid().dispute().expect("disputing channel");

        chan.assert();
        Ok(())
    })
}
